; Atoms
(const {ok} ())
(const {nil} {})
(const {true} 1)
(const {false} 0)
(const {range} (typeof 4..5))
(const {symbol} (typeof (extract 0 {sym})))

; Function Definition With Error Checking
(def {fn} (\ {f b} {
	if (and (== (typeof f) qexpr) (== (typeof b) qexpr)) {
		def (first f) (\ (tail f) b)
	} {
		error "Arguments must be q-expressions!"
	}}))

; Constant Function Definition
(const {const_fn} (\ {f b} {
	if (and (== (typeof f) qexpr) (== (typeof b) qexpr)) {
		const (first f) (\ (tail f) b)
	} {
		error "Arguments must be q-expressions!"
	}}))

; Unpack List for function
(const_fn {unpack f l} {
	eval (join (list f) l)
})

; Pack List for Function
(const_fn {pack f & xs}
	{f xs})

; Demonstrates how to check the type of something,
; Used for optional static typing!
(const_fn {is_5_int x} {
	if (== (typeof 5) int) {
		"5 is an integer"
	} {
		"5 is not an integer"
	}})

(const_fn {do & l} {
	if (== l nil)
		{nil}
		{last l}})

; Library Implementation of Static Typing

(const_fn {check_var_in_lambda l} {
	{}
})

; Extract first and second element, check them, give rest to check_fn_arg_types unless empty, then return 1/true
; if (== (typeof (get 1 args))) ; Check if it is a symbol, then just skip (not every arg needs a type)
(const_fn {check_fn_arg_types args} {
	if (== (typeof args) qexpr) {
		if (>= (len args) 1) {
			if (== (typeof (get 1 args)) string) {
				check_fn_arg_types (tail (tail args))
			} { false }
		} (== (len args) 1) { error "For every argument, there must be a type." } { true }
	} { error "Argument 1 must be a q-expression." }})

; TODO: add code to lambda (if fn function) to check the input of the lambda
; to see if it matches the correct types, returns errors if it doesn't, or
; eval the function body if it does

(const_fn {remove_fn_types args} {
	if (== (typeof args) qexpr) {
		if (!= (len args) 0) {
			(join (first args) (remove_fn_types (tail (tail args))))
			} { {} }
	} { error "Argument 1 must be a q-expression!" }})

(const_fn {get_fn_arg_types args} {
	if (== (typeof args) qexpr) {
		if (!= (len args) 0)
			{(join (list (get 1 args)) (get_fn_arg_types (tail (tail args))))}
			{ {} }
	} { error "Argument 1 must be a q-expression with at least 1 item!" }})

; @NO_ARG_CHECKING
(const_fn {get_fn_arg_checking bare_args arg_types} {
			; '{} are special q-expressions that will be converted to regular q-expressions when returned/passed to a function,
			;   This allows you to have special s-expressions or special lists that won't evaluate until the special q-expression is turned into a regular q-expression!
			'{if (== (typeof '(extract 0 bare_args)) '(get 0 arg_types))}
		})

(const {fn} (\ {args l} {
	if (and (== (typeof args) qexpr) (== (typeof l) qexpr)) {
		if (check_fn_arg_types (tail args)) {
			do
				(let {bare_args} (remove_fn_types (tail args)))
				(let {arg_types} (get_fn_arg_types (tail args)))
				(def (first args) (\ bare_args  (join (get_fn_arg_checking bare_args arg_types) (list l) {{error "ERROR"}})))
		} { error "All arguments must have a type!" }
	} { error "Arguments 1 and 2 must be q-expressions!" }
}))

; Open a new scope
(fn {scope b qexpr} {
	((\ {_} b) ())
})
