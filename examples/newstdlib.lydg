# Atoms
const {ok} ();
const {nil} {};
const {true} 1;
const {false} 0;

# Function Definition
const {fn} (l {f: qexpr b: qexpr} {
	def (first f) (l (tail f) b)
});

# Constant Function Definition
const {const_fn} (l {f: qexpr b: qexpr} {
	const (first f) (l (tail f) b)
});

# Unpack List for function
const_fn {unpack f: func q: qexpr} {
	eval (join (list f) q)
};

# Pack List for Function
const_fn {pack f: func &xs: int}
	{f xs};

const_fn {do &l: any} {
	if (== l nil)
		{nil}
		{last l}};

# Open a new scope
const_fn {scope b: qexpr} {
	(l {_: any} b) ()
};

const_fn {flip f: func a: any b: any} {f b a};

const_fn {map f: func q: qexpr} {
	if (== q nil)
		{nil}
		{join (list (f (get 0 l))) (map f (tail q))}
};

const_fn {isok a: any} {
		if (== a ok)
		{true} {false}
	}; # TODO - implement any in interpreter

const_fn {isnok a: any} {
		if (!= a ok)
		{true} {false}
	};

const_fn {iserr a: any} {
		if (== (typeof a) err)
		{true} {false}
	};

const_fn {iferrdo a: any f: func} {
		if (== (typeof a) err)
		{f a} {ok}
	};
