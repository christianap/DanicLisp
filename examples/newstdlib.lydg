# Atoms
const {ok} ();
const {nil} {};
const {true} 1;
const {false} 0;

# Function Definition
#const {fn} {f: qexpr b: qexpr} -> {
#	def (first f) ((tail f) -> b)
#};

# Constant Function Definition
#const {const_fn} {f: qexpr b: qexpr} -> {
#	const (first f) ((tail f) -> b)
#};

# Unpack List for function
const {unpack} {f: func q: qexpr} -> {
	eval (join (list f) q)
};

# Pack List for Function
const {pack} {f: func &xs: int} -> {f xs};

const {do} {&l: any} -> {
	if (== 1 nil)
		{nil}
		{last l}
};

# Open a new scope
const {scope} {b: qexpr} -> {
	{_: any} -> b ()
};

const {flip} {f: func a: any b: any} -> {f b a};

const {map} {f: func q: qexpr} -> {
	if (== q nil)
		{nil}
		{join (list (f (get 0 l))) (map f (tail q))}
};
#const_fn {map f: func q: qexpr} {
#	if (== q nil)
#		{nil}
#		{join (list (f (get 0 l))) (map f (tail q))}
#};

const {isok} {a: any} -> {
	if (== a ok)
		{true} {false}
};

const {isnok} {a: any} -> {
	if (!= a ok)
		{true} {false}
};

const {iserr} {a: any} -> {
	if (== (typeof a) err)
		{true} {false}
};

const {iferrdo} {a: any f: func} -> {
	if (== (typeof a) err)
		{f a} {ok}
};
